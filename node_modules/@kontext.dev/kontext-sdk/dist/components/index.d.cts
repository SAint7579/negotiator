export { K as KontextConnectButton, b as KontextConnectButtonProps, a as KontextStatus, c as KontextStatusProps } from '../KontextStatus-CNb0GDRZ.cjs';
import * as react_jsx_runtime from 'react/jsx-runtime';
import * as react from 'react';
import react__default from 'react';

interface KontextModalProps {
    trigger: react__default.ReactNode;
    className?: string;
    apiKey?: string;
    apiUrl?: string;
    id?: string;
}
declare function KontextModal({ trigger, className, id: customId }: KontextModalProps): react_jsx_runtime.JSX.Element;

interface ModalState {
    isOpen: boolean;
    isConnecting: boolean;
}
interface ModalActions {
    open: () => void;
    close: () => void;
    toggle: () => void;
    setConnecting: (connecting: boolean) => void;
}
interface UseModalStateOptions {
    initialOpen?: boolean;
    onOpenChange?: (open: boolean) => void;
    onConnectingChange?: (connecting: boolean) => void;
}
/**
 * Hook for managing modal state with proper isolation between instances
 */
declare function useModalState(options?: UseModalStateOptions): ModalState & ModalActions;

type Theme = 'light' | 'dark';
interface UseThemeDetectionOptions {
    initialTheme?: Theme;
    onThemeChange?: (theme: Theme) => void;
}
/**
 * Hook for detecting and tracking theme changes
 * Each instance maintains its own observers to prevent conflicts
 */
declare function useThemeDetection(options?: UseThemeDetectionOptions): Theme;

declare const designTokens: {
    readonly light: {
        readonly background: "#ffffff";
        readonly foreground: "#0a0a0a";
        readonly card: "#ffffff";
        readonly cardForeground: "#0a0a0a";
        readonly popover: "#ffffff";
        readonly popoverForeground: "#0a0a0a";
        readonly primary: "#0066cc";
        readonly primaryForeground: "#ffffff";
        readonly secondary: "#fafafa";
        readonly secondaryForeground: "#0a0a0a";
        readonly muted: "#f5f5f5";
        readonly mutedForeground: "#666666";
        readonly accent: "#f5f5f5";
        readonly accentForeground: "#0a0a0a";
        readonly destructive: "#dc2626";
        readonly destructiveForeground: "#ffffff";
        readonly border: "#f0f0f0";
        readonly input: "#f0f0f0";
        readonly ring: "#0066cc";
        readonly success: "#22c55e";
        readonly successForeground: "#ffffff";
        readonly warning: "#f59e0b";
        readonly zinc: "#71717a";
        readonly forestGreen: "#16a34a";
    };
    readonly dark: {
        readonly background: "#0a0a0a";
        readonly foreground: "#f5f5f5";
        readonly card: "#0a0a0a";
        readonly cardForeground: "#f5f5f5";
        readonly popover: "#0a0a0a";
        readonly popoverForeground: "#f5f5f5";
        readonly primary: "#4d94ff";
        readonly primaryForeground: "#0a0a0a";
        readonly secondary: "#1a1a1a";
        readonly secondaryForeground: "#f5f5f5";
        readonly muted: "#1a1a1a";
        readonly mutedForeground: "#999999";
        readonly accent: "#1a1a1a";
        readonly accentForeground: "#f5f5f5";
        readonly destructive: "#ef4444";
        readonly destructiveForeground: "#f5f5f5";
        readonly border: "#262626";
        readonly input: "#262626";
        readonly ring: "#4d94ff";
        readonly success: "#22c55e";
        readonly successForeground: "#0a0a0a";
        readonly warning: "#f59e0b";
        readonly zinc: "#a1a1aa";
        readonly forestGreen: "#22c55e";
    };
};
declare const typography: {
    fontSans: string;
    fontMono: string;
    fontSize: {
        xs: string;
        sm: string;
        base: string;
        lg: string;
        xl: string;
    };
    fontWeight: {
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    lineHeight: {
        tight: string;
        normal: string;
        relaxed: string;
    };
};
declare const spacing: {
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: string;
    8: string;
};
declare const borderRadius: {
    none: string;
    sm: string;
    base: string;
    md: string;
    lg: string;
    xl: string;
    squircle: string;
    full: string;
};
declare const transitions: {
    fast: string;
    base: string;
    slow: string;
};
declare const elevation: {
    low: string;
    medium: string;
    high: string;
    lowDark: string;
    mediumDark: string;
    highDark: string;
};
declare const getTheme: () => "light" | "dark";
declare const getTokens: () => {
    readonly background: "#ffffff";
    readonly foreground: "#0a0a0a";
    readonly card: "#ffffff";
    readonly cardForeground: "#0a0a0a";
    readonly popover: "#ffffff";
    readonly popoverForeground: "#0a0a0a";
    readonly primary: "#0066cc";
    readonly primaryForeground: "#ffffff";
    readonly secondary: "#fafafa";
    readonly secondaryForeground: "#0a0a0a";
    readonly muted: "#f5f5f5";
    readonly mutedForeground: "#666666";
    readonly accent: "#f5f5f5";
    readonly accentForeground: "#0a0a0a";
    readonly destructive: "#dc2626";
    readonly destructiveForeground: "#ffffff";
    readonly border: "#f0f0f0";
    readonly input: "#f0f0f0";
    readonly ring: "#0066cc";
    readonly success: "#22c55e";
    readonly successForeground: "#ffffff";
    readonly warning: "#f59e0b";
    readonly zinc: "#71717a";
    readonly forestGreen: "#16a34a";
} | {
    readonly background: "#0a0a0a";
    readonly foreground: "#f5f5f5";
    readonly card: "#0a0a0a";
    readonly cardForeground: "#f5f5f5";
    readonly popover: "#0a0a0a";
    readonly popoverForeground: "#f5f5f5";
    readonly primary: "#4d94ff";
    readonly primaryForeground: "#0a0a0a";
    readonly secondary: "#1a1a1a";
    readonly secondaryForeground: "#f5f5f5";
    readonly muted: "#1a1a1a";
    readonly mutedForeground: "#999999";
    readonly accent: "#1a1a1a";
    readonly accentForeground: "#f5f5f5";
    readonly destructive: "#ef4444";
    readonly destructiveForeground: "#f5f5f5";
    readonly border: "#262626";
    readonly input: "#262626";
    readonly ring: "#4d94ff";
    readonly success: "#22c55e";
    readonly successForeground: "#0a0a0a";
    readonly warning: "#f59e0b";
    readonly zinc: "#a1a1aa";
    readonly forestGreen: "#22c55e";
};
type TokenType = typeof designTokens.light | typeof designTokens.dark;
declare const buttonVariants: {
    default: (tokens: TokenType) => {
        backgroundColor: "#0066cc" | "#4d94ff";
        color: "#ffffff" | "#0a0a0a";
        border: string;
        '&:hover': {
            backgroundColor: "#0066cc" | "#4d94ff";
            opacity: number;
        };
    };
    secondary: (tokens: TokenType) => {
        backgroundColor: "#fafafa" | "#1a1a1a";
        color: "#0a0a0a" | "#f5f5f5";
        border: string;
        '&:hover': {
            backgroundColor: "#fafafa" | "#1a1a1a";
            opacity: number;
        };
    };
    outline: (tokens: TokenType) => {
        backgroundColor: "#ffffff" | "#0a0a0a";
        color: "#0a0a0a" | "#f5f5f5";
        border: string;
        '&:hover': {
            backgroundColor: "#f5f5f5" | "#1a1a1a";
        };
    };
    ghost: (tokens: TokenType) => {
        backgroundColor: string;
        color: "#0a0a0a" | "#f5f5f5";
        border: string;
        '&:hover': {
            backgroundColor: "#f5f5f5" | "#1a1a1a";
        };
    };
    destructive: (tokens: TokenType) => {
        backgroundColor: "#dc2626" | "#ef4444";
        color: "#ffffff" | "#f5f5f5";
        border: string;
        '&:hover': {
            backgroundColor: "#dc2626" | "#ef4444";
            opacity: number;
        };
    };
    success: (tokens: TokenType) => {
        backgroundColor: "#22c55e";
        color: "#ffffff" | "#0a0a0a";
        border: string;
        '&:hover': {
            backgroundColor: "#22c55e";
            opacity: number;
        };
    };
};
declare const buttonSizes: {
    sm: {
        height: string;
        padding: string;
        fontSize: string;
        gap: string;
    };
    default: {
        height: string;
        padding: string;
        fontSize: string;
        gap: string;
    };
    lg: {
        height: string;
        padding: string;
        fontSize: string;
        gap: string;
    };
};
declare const baseButtonStyles: {
    fontFamily: string;
    fontWeight: number;
    borderRadius: string;
    transition: string;
    cursor: string;
    display: string;
    alignItems: string;
    justifyContent: string;
    whiteSpace: "nowrap";
    outline: string;
    position: "relative";
    '&:disabled': {
        opacity: number;
        cursor: string;
    };
    '&:focus-visible': {
        outline: string;
        outlineOffset: string;
    };
};
declare const cardStyles: (tokens: TokenType) => {
    backgroundColor: "#ffffff" | "#0a0a0a";
    color: "#0a0a0a" | "#f5f5f5";
    border: string;
    borderRadius: string;
    padding: string;
    boxShadow: string;
};
declare const createInteractiveStyles: (baseStyle: React.CSSProperties, hoverStyle?: React.CSSProperties, activeStyle?: React.CSSProperties) => {
    base: react.CSSProperties;
    hover: react.CSSProperties;
    active: react.CSSProperties;
};

export { KontextModal, type KontextModalProps, type ModalActions, type ModalState, type Theme, type UseModalStateOptions, type UseThemeDetectionOptions, baseButtonStyles, borderRadius, buttonSizes, buttonVariants, cardStyles, createInteractiveStyles, designTokens, elevation, getTheme, getTokens, spacing, transitions, typography, useModalState, useThemeDetection };
