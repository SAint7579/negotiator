/**
 * Personalized context returned by Persona API
 */
interface Context {
    /** System prompt for LLM */
    systemPrompt: string;
    /** Optional: structured data about the user */
    metadata?: {
        userId: string;
        timestamp: Date;
        providers: string[];
    };
    /** Optional: token count */
    tokenCount?: number;
}
/**
 * User consent record for GDPR compliance
 */
interface ConsentRecord {
    userId: string;
    scopes: string[];
    timestamp: Date;
}
/**
 * Configuration for Persona SDK
 */
interface PersonaConfig {
    /** API key for authentication */
    apiKey: string;
    /** Optional: enable specific providers */
    providers?: string[];
    /** Optional: API endpoint override */
    apiUrl?: string;
    /** Optional: cache configuration */
    cache?: {
        /** Cache TTL in seconds (default: 300) */
        ttl?: number;
        /** Cache storage backend */
        storage?: 'memory' | 'redis';
    };
    /** Optional: request limits */
    limits?: {
        /** Max tokens per request (default: 2000) */
        maxTokensPerRequest?: number;
        /** Monthly budget in USD */
        monthlyBudget?: number;
    };
}
/**
 * Options for getting context
 */
interface GetContextOptions {
    /** User ID from your auth system */
    userId: string;
    /** Task or use case for the context */
    task: string;
    /** Optional: max tokens for context */
    maxTokens?: number;
    /** Optional: specific providers to use */
    providers?: string[];
    /** Optional: use identity mode (AI acts AS the user) */
    useIdentityMode?: boolean;
    /** Optional: privacy level for PII handling */
    privacyLevel?: 'strict' | 'moderate' | 'none';
}
/**
 * SDK error types
 */
declare class PersonaError extends Error {
    code: string;
    statusCode?: number | undefined;
    constructor(message: string, code: string, statusCode?: number | undefined);
}
/**
 * Auth token response from Persona backend
 */
interface PersonaToken {
    token: string;
    expiresAt: Date;
    userId: string;
}

/**
 * Main Persona SDK client
 * Provides a simple API for developers to get personalized context
 */
declare class Persona {
    private config;
    constructor(config: PersonaConfig);
    /**
     * Get personalized context for a user
     * This is the main method developers will use
     */
    getContext(options: GetContextOptions): Promise<Context>;
    /**
     * Disconnect user and delete their data
     * This calls the GDPR deleteData endpoint
     */
    disconnect(userId: string): Promise<void>;
    /**
     * Create a PersonaError
     */
    private createError;
}

export { type ConsentRecord, type Context, type GetContextOptions, Persona, type PersonaConfig, PersonaError, type PersonaToken };
