import * as react_jsx_runtime from 'react/jsx-runtime';
import { ReactNode } from 'react';
export { K as KontextConnectButton, b as KontextConnectButtonProps, a as KontextStatus, c as KontextStatusProps } from '../KontextStatus-CNb0GDRZ.js';

interface KontextContextValue {
    apiKey?: string;
    isConnected: boolean;
    userId: string | null;
    isLoading: boolean;
    error: string | null;
    connectGmail: () => void;
    disconnect: () => void;
    systemPrompt: string | null;
    profileLastUpdated: Date | null;
    isProfileStale: boolean;
    isRefreshingProfile: boolean;
    refreshProfile: () => Promise<void>;
    trpc: any;
}
interface KontextProviderProps {
    apiKey?: string;
    apiUrl?: string;
    children: ReactNode;
}
/**
 * KontextProvider component that wraps your app
 * Automatically includes tRPC and QueryClient setup internally
 * Similar to PrivyProvider but for Persona
 */
declare function KontextProvider({ apiKey, apiUrl, children, }: KontextProviderProps): react_jsx_runtime.JSX.Element;
/**
 * Hook to access Persona context
 * Must be used within KontextProvider
 */
declare function useKontext(): KontextContextValue;
/**
 * Hook to access just the profile data
 * Convenience hook for getting cached profile information
 */
declare function useKontextProfile(): {
    systemPrompt: string | null;
    lastUpdated: Date | null;
    isStale: boolean;
    isRefreshing: boolean;
    refresh: () => Promise<void>;
};

interface RealtimeContextOptions {
    enabled?: boolean;
    onUpdate?: (event: any) => void;
}
interface RealtimeContextState {
    isConnected: boolean;
    lastUpdate: Date | null;
    updateCount: number;
    recentUpdates: Array<{
        type: string;
        timestamp: Date;
        metadata?: any;
    }>;
}
/**
 * Hook for real-time context updates via WebSocket subscriptions
 */
declare function useRealtimeContext(options?: RealtimeContextOptions): RealtimeContextState;
/**
 * Hook for automatic polling fallback when WebSocket is not available
 */
declare function usePollingContext(intervalMs?: number): {
    isPolling: boolean;
};

export { KontextProvider, type KontextProviderProps, type RealtimeContextOptions, type RealtimeContextState, useKontext, useKontextProfile, usePollingContext, useRealtimeContext };
