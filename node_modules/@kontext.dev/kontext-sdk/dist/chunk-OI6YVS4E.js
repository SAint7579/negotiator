import {createTRPCProxyClient,httpBatchLink}from'@trpc/client';import m from'superjson';function i(d,e){let r=e.startsWith("ktext");return createTRPCProxyClient({links:[httpBatchLink({url:`${d}/trpc`,transformer:m,maxItems:10,maxURLLength:2083,async headers(){return r?{"x-api-key":e}:{Authorization:`Bearer ${e}`}},fetch(o,t){return fetch(o,{...t,keepalive:true})}})]})}var c=class{constructor(e){if(!e.apiKey)throw new Error("Persona API key is required");this.config={apiKey:e.apiKey,providers:e.providers||["gmail","preferences"],apiUrl:e.apiUrl||"https://api.kontext.dev",cache:{ttl:e.cache?.ttl||300,storage:e.cache?.storage||"memory"},limits:{maxTokensPerRequest:e.limits?.maxTokensPerRequest||2e3,monthlyBudget:e.limits?.monthlyBudget||0}};}async getContext(e){if(!e)throw this.createError("GetContextOptions is required. Please provide an object with at least a userId field.","INVALID_OPTIONS",400);let{userId:r,task:o,maxTokens:t,privacyLevel:a}=e;if(!r||typeof r!="string")throw this.createError("Valid userId is required. Please provide a non-empty string userId.","INVALID_USER_ID",400);if(t!==void 0&&(typeof t!="number"||t<=0))throw this.createError("maxTokens must be a positive number if provided.","INVALID_MAX_TOKENS",400);if(a&&!["strict","moderate","none"].includes(a))throw this.createError("privacyLevel must be one of: strict, moderate, none","INVALID_PRIVACY_LEVEL",400);let h=i(this.config.apiUrl,this.config.apiKey);try{let s=await h.data.context.query({userId:r,task:o||"general",maxFacts:t?Math.min(t/10,100):void 0,cachePolicy:"fresh",includeRecentData:!0,privacyLevel:a||"none"});return {systemPrompt:s.systemPrompt,metadata:{userId:e.userId,timestamp:s.metadata?.generatedAt||new Date,providers:["gmail"]},tokenCount:s.systemPrompt.length/4}}catch(s){let n=s instanceof Error?s.message:"Failed to get context";throw n.includes("Invalid input")||n.includes("expected object")?this.createError("Invalid request format. This may be a SDK version mismatch with the API.","INVALID_REQUEST_FORMAT",400):n.includes("OAuth access")||n.includes("No OAuth")?this.createError("User has not authorized access. Please ensure the user has connected their account.","UNAUTHORIZED_USER",403):this.createError(n,"CONTEXT_FAILED",500)}}async disconnect(e){if(!e||typeof e!="string")throw this.createError("Valid userId is required for disconnect. Please provide a non-empty string userId.","INVALID_USER_ID",400);try{await i(this.config.apiUrl,this.config.apiKey).gdpr.deleteData.mutate({userId:e});}catch(r){let o=r instanceof Error?r.message:"Failed to disconnect";throw o.includes("not found")||o.includes("does not exist")?this.createError("User not found. The user may have already been disconnected.","USER_NOT_FOUND",404):this.createError(o,"DISCONNECT_FAILED",500)}}createError(e,r,o){let t=new Error(e);return t.name="PersonaError",t.code=r,t.statusCode=o,t}};
export{c as a};//# sourceMappingURL=chunk-OI6YVS4E.js.map
//# sourceMappingURL=chunk-OI6YVS4E.js.map